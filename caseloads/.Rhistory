j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols(x)
h <- clean_cols(x)
View(dc_2017_c)
View(h)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
clean_cols(x)
j <- clean_cols(x)
rm(h)
rm(j)
lapply(dc_2017_c, function(x){})
lapply(dc_2017_c, function(x){
x[] <- lapply(x, clean_cols)
})
lapply(dc_2017_c, clean_cols)
try<-lapply(dc_2017_c, clean_cols)
View(try)
try[[3]]
View(dc_2017_c)
dc_2017_c[[2]]
dc_2017_c[[14]]
dc_2017_c[[14]]$X5
View(x)
View(try)
try[[1]]
colSums(is.na(x$X11))
sum(is.na(x$X11))
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
j = apply(j,2,function(x) all(!is.na(x)))
return(j)
}
clean_cols(x)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
j = apply(j,2,function(x) x %>% select_if(not_any_na))
return(j)
}
clean_cols(x)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
j = apply(j,1,function(x) x %>% select_if(not_any_na))
return(j)
}
clean_cols(x)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
j = j[colSums(!is.na(j)) > 0]
return(j)
}
clean_cols(x)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols(x)
m <- clean_cols(x)
rm(try)
try<-lapply(dc_2017_c, clean_cols)
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
try<-lapply(dc_2017_c, clean_cols)
View(try)
View(dc_2017_c)
View(try)
try2<-lapply(dc_2016_c, clean_cols)
View(try2)
try3<-lapply(dc_2015_c, clean_cols)
View(try3)
dc_2017_c[[14]]
dc_2017_c[[17]]
dc_2017_c[[12]]
dc_2015_c[[14]]
try<-lapply(dc_2017_c, clean_cols)
clean_cols(dc_2017_c[[14]])
clean_cols(dc_2017_c[[15]])
clean_cols(dc_2017_c[[12]])
clean_cols(dc_2017_c[[14]])
str(dc_2017_c[[14]])
bad <- dc_2017_c[[14]]
View(bad)
for(i in names(bad)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
}
View(bad)
col_match <- vector(mode = "character")
for(i in names(bad)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
}
names(bad)
col_match <- vector(mode = "character")
for(i in names(bad)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
col_match
}
good <- dc_2017_c[[12]]
for(i in names(good)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
col_match
}
for(i in names(good)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
}
col_match <- vector(mode = "character")
for(i in names(good)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
}
col_match <- ""
for(i in names(good)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
}
col_match <- vector("character")
for(i in names(good)){
if(sum(str_detect(string = bad[[i]], pattern = "\\s")) ==
(nrow(bad)-2)){
col_match[i] <- names(bad[i])
}
}
bad[[1]]
bad[[2]]
bad[[3]]
rm(list=ls())
##### Read PDFs and Extract Tables #####
library(rJava)
library(tabulizer)
library(plyr)
library(tidyverse)
library(data.table)
## directory
base <- "H:/Public/Justice Program/Reports and Pubs/Crim/Arnold Foundation Fees and Fines (Phase II)/Data/Cost Data/New Mexico/Caseloads2/caseloads"
setwd(base)
## obtain pdfs from directory
pdfs <- list.files(base)
## District Criminal ##
## 2017
dc_2017 <- list(NA)
for(i in 6:20){
dc_2017[[i]] <- extract_tables(pdfs[[3]], i)
}
## 2016
dc_2016 <- list(NA)
for(i in 6:19){
dc_2016[[i]] <- extract_tables(pdfs[[2]], i)
}
## 2015
dc_2015 <- list(NA)
for(i in 6:19){
dc_2015[[i]] <- extract_tables(pdfs[[1]],i)
}
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
return(lis)
}
dc_2017_c <- clean_cd(dc_2017)
dc_2016_c <- clean_cd(dc_2016)
dc_2015_c <- clean_cd(dc_2015)
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
try2 <- lapply(dc_2016_c, clean_cols)
try3 <- lapply(dc_2015_c, clean_cols)
try <-lapply(dc_2017_c, clean_cols)
View(dc_2017)
View(dc_2017_c)
View(try)
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
return(lis)
}
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
## clean criminal district ##
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
return(lis)
}
rm(grepl("^t"))
?rm
rm("try", "try2", "try3")
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
return(lis)
}
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
## clean criminal district ##
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
return(lis)
}
dc_2016_c <- clean_cd(dc_2016)
dc_2015_c <- clean_cd(dc_2015)
dc_2017_c <- clean_cd(dc_2017)
View(dc_2017_c)
View(dc_2017)
View(dc_2017_c)
View(dc_2016)
View(dc_2016_c)
dc_2016_c[[13]]
View(dc_2017_c)
View(dc_2015_c)
dc_2015_c[[1]]
dc_2015_c[[14]]
dropNAcols <- function(df){
df <- df[,colSums(is.na(df))<nrow(df)]
return(df)
}
lapply(dc_2016_c, dropNAcols)
lapply(dc_2016_c[[1]], dropNAcols)
lapply(dc_2016_c[[2]], dropNAcols)
data.frame(z = c(1,2), y = c(1,2), z = c(NA, NA))
t <- data.frame(z = c(1,2), y = c(1,2), z = c(NA, NA))
dropNAcols(t)
t <- dropNAcols(t)
lapply(dc_2016_c, function(x){
x[] <- x[lapply(x, function(df) colSums(is.na(df))<nrow(df))]
})
x[[1]]
dc_2016_c[[1]]
str(dc_2016_c[[1]])
dropNAcols(dc_2016_c[[1]])
dc_2016_c[dropNAcols(dc_2016_c[[1]]),]
dc_2016_c[dropNAcols(dc_2016_c[[1]])]
try <- dc_2016_c[dropNAcols(dc_2016_c[[1]])]
View(try)
dc_2016_c[dropNAcols(dc_2016_c[[1]])]
dropNAcols(dc_2016_c[[1]])
x <- dc_2016_c[[1]]
dropNAcols(x)
str(x)
f <- data.frame(1, NA)
f
dropNAcols(f)
rm(F)
rm(f)
rm(try)
rm(t)
str(x)
x <- data.frame(x)
str(x)
dropNAcols <- function(df){
df <- data.frame(df)
df <- df[,colSums(is.na(df))<nrow(df)]
return(df)
}
lapply(dc_2016_c, dropNAcols)
try <- lapply(dc_2016_c, dropNAcols)
View(try)
try2 <- lapply(dc_2015_c, dropNAcols)
View(try2)
rm(dc_2016_c, dc_2017_c, dc_2015_c)
rm(try, try2,x)
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
## drop NA columns ##
dropNAcols <- function(df){
df <- data.frame(df)
df <- df[,colSums(is.na(df))<nrow(df)]
return(df)
}
## clean criminal district ##
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
lis <- lapply(lis, dropNAcos)
return(lis)
}
dc_2017_c <- clean_cd(dc_2017)
dc_2016_c <- clean_cd(dc_2016)
dc_2015_c <- clean_cd(dc_2015)
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
## drop NA columns ##
dropNAcols <- function(df){
df <- data.frame(df)
df <- df[,colSums(is.na(df))<nrow(df)]
return(df)
}
## clean criminal district ##
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:3),]) #remove first 3 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
lis <- lapply(lis, dropNAcols)
return(lis)
}
dc_2017_c <- clean_cd(dc_2017)
dc_2016_c <- clean_cd(dc_2016)
dc_2015_c <- clean_cd(dc_2015)
View(dc_2015_c)
View(dc_2016_c)
View(dc_2017)
View(dc_2017_c)
View(dc_2015_c)
View(dc_2015)
dc_2015[[6]]
View(dc_2015_c)
dc_2015[[1]]
dc_2015[[5]]
dc_2015[[6]]
View(dc_2015)
lapply(dc_2015, function(df) df[3,1])
lapply(dc_2015, function(df) df[3,1])
dc_2015[[6]]
lapply(dc_2015, function(x) x[3,1])
dc_2015[[5]][3,1]
dc_2015[[6]][3,1]
dc_2015[[6]][1]
dc_2015[[6]][[1]]
dc_2015[[6]][1,]
dc_2015[[6]][1]
dc_2015[[6]]
dc_2015[[6]][[1]][1,3]
dc_2015[[6]][[1]][3,1]
lapply(dc_2015, function(x){
x[] <- lapply(x, function(y) y[3,1])
})
lapply(dc_2015_c, funtion(df) df[3,1])
lapply(dc_2015_c, funtion(df) df[3,1])
