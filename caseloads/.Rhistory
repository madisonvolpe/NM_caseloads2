mc_2017[[i]] <- extract_tables(pdfs[[3]], i)
}
## 2016
mc_2016 <- list(NA)
for(i in 50:69){
mc_2016[[i]] <- extract_tables(pdfs[[2]], i)
}
## 2015
mc_2015 <- list(NA)
for(i in 49:68){
mc_2015[[i]] <- extract_tables(pdfs[[1]],i)
}
## clean columns function ##
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(names(df[i]) != "X1" & sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df)-2) |
names(df[i]) != "X1" & sum(str_detect(string = df[[i]],pattern = "\\s")) ==
(nrow(df)-1)){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
## drop NA columns ##
dropNAcols <- function(df){
df <- data.frame(df)
df <- df[,colSums(is.na(df))<nrow(df)]
return(df)
}
## make 1st row blank
first_blank <-  function(df){
df[1, 2:length(df)] <- str_replace_all(string = df[1,2:length(df)],
pattern = "[\\w\\.]",
replacement = "")
return(df)
}
## set colnames
custom_names <- function(df){
colnames(df) <- c("Court", "PendStart", "New", "Reopen", "Closed",
"PendatEnd", "Pending0.6", "Pending6plus",
"PendingInact.BW", "JuryTrials", "NonJuryTrials",
"Convict", "Acquit", "PleaTrial", "DismTrial",
"DismBrief", "PleaBef", "DismbyPros", "PostJActiv", "Other")
return(df)
}
## clean criminal district ##
clean_cd <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
lis <- lapply(lis, function(df) df[-c(1:2),]) #remove first 2 rows of df
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, first_blank)
lis <- lapply(lis, clean_cols)
lis <- lapply(lis, dropNAcols)
return(lis)
}
## Create Grouping Variables ##
create_group <- function(df,num){
courts <- c("First District Court", "Second District Court",
"Third District Court", "Fourth District Court",
"Fifth District Court", "Sixth District Court",
"Seventh District Court", "Eighth District Court",
"Ninth District Court", "Tenth District Court",
"Eleventh District Court", "Twelfth District Court",
"Thirteenth District Court", "Statewide District Court")
df <- df %>%
mutate(court.type = case_when(
grepl(pattern = "District Court",x=lag(Court,1))~
lag(Court,1))) %>%
filter(!Court %in% courts)
while(length(ind <- which(is.na(df[,"court.type"]))) > 0){
df[,"court.type"][ind] <- df[,"court.type"][ind -1]
}
df <- df %>%
mutate(Year = num)
return(df)
}
## clean magistrate criminal
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, clean_cols)
lis <- lapply(lis, dropNAcols)
return(lis)
}
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac < - clean_mc(mc_2017)
prac <- clean_mc(mc_2017)
ex <- prac[[17]]
View(ex)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(!names(df[i]) %in% c("X1", "court") &
sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df))){
col_match[i] <- names(df[i])
}
}
#j = cSplit(df, splitCols = col_match, sep = " ")
return(col_match)
}
v <- clean_cols(ex)
within(names(v))
names(v)
names(df)
names(ex)
View(ex)
ex %>% filter("X1" != "Total")
ex %>% filter("X1" == "Total")
ex %>% filter(X1 == "Total")
within(ex, ex[,"X8"] <- data.frame(do.call('rbind', strsplit(as.character(X7),"\\s"))))
within(ex, ex[,"X8"] <- data.frame(do.call('rbind', strsplit(ex[,"X8"],"\\s"))))
within(ex, ex[,"X8"] <- data.frame(do.call('rbind', strsplit(ex[,"X8"],"\\s"))))
within(ex, ex[,"X8"] <- data.frame(do.call('rbind', strsplit(as.character(ex[,"X8"]),"\\s"))))
ex[,"X8"] <- data.frame(do.call('rbind', strsplit(as.character(ex[,"X8"]),"\\s")))
View(ex)
ex$X8
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
clean_mc(mc_2017)
prac <- clean_mc(mc_2017)
str(prac[[1]])
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(!names(df[i]) %in% c("X1", "court") &
sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df))){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(col_match)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
View(prac)
prac[[X6]]
prac[[6]]
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(!names(df[i]) %in% c("X1", "court") &
sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df))){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(col_match)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
View(prac)
View(prac)
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(!names(df[i]) %in% c("X1", "court") &
sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df))){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
j[[1]]
j <- j[[1]]
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
clean_cols <- function(df){
col_match <- vector(mode = "character")
for(i in names(df)){
if(!names(df[i]) %in% c("X1", "court") &
sum(str_detect(string = df[[i]], pattern = "\\s")) ==
(nrow(df))){
col_match[i] <- names(df[i])
}
}
j = cSplit(df, splitCols = col_match, sep = " ")
return(j)
}
clean_cols <- purrr::possibly(clean_cols, otherwise = NA)
prac <- clean_mc(mc_2017)
View(prac)
View(prac)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
View(prac)
prac <- clean_mc(mc_2017)
prac[[7]]
ex2 <- prac[[7]]
View(ex2)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,] |
df[rowSums(df[,2:11] == "")!=9,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10 |
rowSums(df[,2:11] == "")!=9 ,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
ex2 <- prac[[7]]
View(ex2)
View(ex2)
rowSums(df[,2:10] == "")!=9
rowSums(ex2[,2:10] == "")!=9
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10 |
rowSums(df[,2:10] == "")!=9 ,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
ex2 <- prac[[7]]
View(ex2)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) df[rowSums(df[,2:9] == "") !=9,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
ex2 <- prac[[7]]
View(ex2)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) df[rowSums(df[,2:10] == "") !=9,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
#lis <- lapply(lis, clean_cols)
#lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
ex2 <- prac[[7]]
View(ex2)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) df[rowSums(df[,2:10] == "") !=9,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
lis <- lapply(lis, dropNAcols)
return(lis)
}
prac <- clean_mc(mc_2017)
View(prac)
View(prac)
prac[[1]]
prac[[20]]
prac[[13]]
rm(ex)
rm(ex2)
clean_mc <- function(lis){
## cleaning
lis <- lis[lapply(lis,length) >0 &
lapply(lis,is.logical)==FALSE] # remove empty lists
lis <- lapply(lis, data.frame) # make each entry in a list a df
lis <- lapply(lis, function(df) df %>%
mutate(court = ifelse(grepl("Magistrate Court",x=df[,"X1"]),
as.character(X1), NA)) %>%
mutate(court = ifelse(lead(X1,1)=="Magistrate Court" |
lead(X1,1) == "Court",
paste(X1, lead(X1,1), sep = " "), court)) %>%
mutate(court = ifelse(court == "Magistrate Court",
NA, court)))
lis <- lapply(lis, function (df) df %>%
tidyr::fill(court))
lis <- lapply(lis, function(df) df[-c(1:3),])
lis <- lapply(lis, function(df) df[rowSums(df[,2:11] == "")!=10,])
lis <- lapply(lis, function(df) df[rowSums(df[,2:10] == "") !=9,])
lis <- lapply(lis, function(df) mutate_all(df, as.character))
lis <- lapply(lis, clean_cols)
lis <- lapply(lis, dropNAcols)
lis <- lapply(lis, function(x){
x[] <- x[lapply(x, function(y) sum(y == ""))!= nrow(x)]
}) #remove empty columns in each df in the list
return(lis)
}
prac <- clean_mc(mc_2017)
View(prac)
View(prac)
View(mc_2017)
mc_2017[[67]]
